"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const HotelDetail_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/HotelDetail"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class HotelsController {
    async inserthotel({ request }) {
        const table2 = new HotelDetail_1.default();
        table2.hid = request.input('id');
        table2.cusid = request.input('cusid');
        table2.branch = request.input('branch');
        table2.street = request.input('street');
        table2.pin_code = request.input('pincode');
        await table2.save();
        return await HotelDetail_1.default.all();
    }
    async readhotel() {
        const data = await HotelDetail_1.default.all();
        data.sort((a, b) => a["id"] - b["id"]);
        return data;
    }
    async updatehotel({ request }) {
        try {
            const user = await HotelDetail_1.default.findByOrFail('id', request.input('id'));
            user.hid = request.input('id');
            user.cusid = request.input('cusid');
            user.branch = request.input('branch');
            user.street = request.input('street');
            user.pin_code = request.input('pincode');
            await user.save();
            return await HotelDetail_1.default.all();
        }
        catch {
            return "sorry wrong details";
        }
    }
    async deletehotel({ request }) {
        try {
            const user = await HotelDetail_1.default.findByOrFail('id', request.params().id);
            user.delete();
            await user.save();
            return await HotelDetail_1.default.all();
        }
        catch {
            return "sorry wrong details";
        }
    }
    async hidasc() {
        return HotelDetail_1.default.query().orderBy("hid", "asc");
    }
    async hiddesc() {
        return HotelDetail_1.default.query().orderBy("hid", "desc");
    }
    async cusidasc() {
        return HotelDetail_1.default.query().orderBy("cusid", "asc");
    }
    async cusiddesc() {
        return HotelDetail_1.default.query().orderBy("cusid", "desc");
    }
    async branchasc() {
        return HotelDetail_1.default.query().orderBy("branch", "asc");
    }
    async branchdesc() {
        return HotelDetail_1.default.query().orderBy("branch", "desc");
    }
    async streetasc() {
        return HotelDetail_1.default.query().orderBy("street", "asc");
    }
    async streetdesc() {
        return HotelDetail_1.default.query().orderBy("street", "desc");
    }
    async pincodeasc() {
        return HotelDetail_1.default.query().orderBy("pin_code", "asc");
    }
    async pincodedesc() {
        return HotelDetail_1.default.query().orderBy("pin_code", "desc");
    }
    async searchhotel({ request }) {
        const data = request.input('Key');
        return Database_1.default
            .from('hotel_details')
            .select('*')
            .where((query) => {
            if (/^[0-9]/.test(data)) {
                query
                    .where('id', data)
                    .orWhere('hid', data)
                    .orWhere('cusid', data)
                    .orWhere('pin_code', +data)
                    .orWhereILike('branch', '%' + data + '%')
                    .orWhereILike('street', '%' + data + '%');
            }
        })
            .orWhere((query) => {
            query
                .orWhereILike('branch', '%' + data + '%')
                .orWhereILike('street', '%' + data + '%');
        });
    }
    async jsondata() {
        const data = await HotelDetail_1.default.all();
        return data;
    }
    async customername() {
        return Database_1.default
            .from('hotel_details')
            .join('customer_details', 'customer_details.cusid', 'hotel_details.cusid')
            .select('hotel_details.*')
            .select('customer_details.name');
    }
}
exports.default = HotelsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSG90ZWxzQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkhvdGVsc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwrRkFBZ0Q7QUFDaEQsMkZBQWlEO0FBR2pELE1BQXFCLGdCQUFnQjtJQUMxQixLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUMsT0FBTyxFQUFxQjtRQUV2RCxNQUFNLE1BQU0sR0FBQyxJQUFJLHFCQUFXLEVBQUUsQ0FBQTtRQUM5QixNQUFNLENBQUMsR0FBRyxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUIsTUFBTSxDQUFDLEtBQUssR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ25DLE1BQU0sQ0FBQyxNQUFNLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNyQyxNQUFNLENBQUMsTUFBTSxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDckMsTUFBTSxDQUFDLFFBQVEsR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3hDLE1BQU0sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFBO1FBQ25CLE9BQU8sTUFBTSxxQkFBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQzdCLENBQUM7SUFDTSxLQUFLLENBQUMsU0FBUztRQUdsQixNQUFNLElBQUksR0FBQyxNQUFNLHFCQUFXLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUN0QyxPQUFPLElBQUksQ0FBQTtJQUVmLENBQUM7SUFDTSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUMsT0FBTyxFQUFDO1FBRTlCLElBQUc7WUFDTCxNQUFNLElBQUksR0FBQyxNQUFNLHFCQUFXLENBQUMsWUFBWSxDQUFDLElBQUksRUFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDbkUsSUFBSSxDQUFDLEdBQUcsR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDbkMsSUFBSSxDQUFDLE1BQU0sR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUNyQyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUNqQixPQUFPLE1BQU0scUJBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtTQUN6QjtRQUNELE1BQUs7WUFFSCxPQUFPLHFCQUFxQixDQUFBO1NBQzdCO0lBQ0wsQ0FBQztJQUNNLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBQyxPQUFPLEVBQUM7UUFFaEMsSUFBRztZQUVELE1BQU0sSUFBSSxHQUFHLE1BQU0scUJBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUM3RSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDYixNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUNqQixPQUFPLE1BQU0scUJBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtTQUN2QjtRQUNELE1BQUs7WUFDSCxPQUFPLHFCQUFxQixDQUFBO1NBQzdCO0lBRUgsQ0FBQztJQUNNLEtBQUssQ0FBQyxNQUFNO1FBRXZCLE9BQU8scUJBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzNDLENBQUM7SUFDTSxLQUFLLENBQUMsT0FBTztRQUV4QixPQUFPLHFCQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxNQUFNLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBQ00sS0FBSyxDQUFDLFFBQVE7UUFFekIsT0FBTyxxQkFBVyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUMsS0FBSyxDQUFDLENBQUE7SUFDN0MsQ0FBQztJQUNNLEtBQUssQ0FBQyxTQUFTO1FBRTFCLE9BQU8scUJBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzlDLENBQUM7SUFDTSxLQUFLLENBQUMsU0FBUztRQUUxQixPQUFPLHFCQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxLQUFLLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBQ00sS0FBSyxDQUFDLFVBQVU7UUFFM0IsT0FBTyxxQkFBVyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUMsTUFBTSxDQUFDLENBQUE7SUFDL0MsQ0FBQztJQUNNLEtBQUssQ0FBQyxTQUFTO1FBRTFCLE9BQU8scUJBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzlDLENBQUM7SUFDTSxLQUFLLENBQUMsVUFBVTtRQUUzQixPQUFPLHFCQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBQyxNQUFNLENBQUMsQ0FBQTtJQUMvQyxDQUFDO0lBQ00sS0FBSyxDQUFDLFVBQVU7UUFFM0IsT0FBTyxxQkFBVyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUMsS0FBSyxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUNNLEtBQUssQ0FBQyxXQUFXO1FBRTVCLE9BQU8scUJBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2pELENBQUM7SUFDTSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUMsT0FBTyxFQUFDO1FBRXRDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDckIsT0FBTyxrQkFBUTthQUNkLElBQUksQ0FBQyxlQUFlLENBQUM7YUFDckIsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNYLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2IsSUFBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDO2dCQUNuQixLQUFLO3FCQUNKLEtBQUssQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDO3FCQUNoQixPQUFPLENBQUMsS0FBSyxFQUFDLElBQUksQ0FBQztxQkFDbkIsT0FBTyxDQUFDLE9BQU8sRUFBQyxJQUFJLENBQUM7cUJBQ3JCLE9BQU8sQ0FBQyxVQUFVLEVBQUMsQ0FBQyxJQUFJLENBQUM7cUJBQ3pCLFlBQVksQ0FBQyxRQUFRLEVBQUMsR0FBRyxHQUFDLElBQUksR0FBQyxHQUFHLENBQUM7cUJBQ25DLFlBQVksQ0FBQyxRQUFRLEVBQUMsR0FBRyxHQUFDLElBQUksR0FBQyxHQUFHLENBQUMsQ0FBQTthQUV2QztRQUNMLENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2YsS0FBSztpQkFDSixZQUFZLENBQUMsUUFBUSxFQUFDLEdBQUcsR0FBQyxJQUFJLEdBQUMsR0FBRyxDQUFDO2lCQUNuQyxZQUFZLENBQUMsUUFBUSxFQUFDLEdBQUcsR0FBQyxJQUFJLEdBQUMsR0FBRyxDQUFDLENBQUE7UUFDeEMsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBQ00sS0FBSyxDQUFDLFFBQVE7UUFFbkIsTUFBTSxJQUFJLEdBQUMsTUFBTSxxQkFBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2xDLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUNNLEtBQUssQ0FBQyxZQUFZO1FBRTFCLE9BQVMsa0JBQVE7YUFDdkIsSUFBSSxDQUFDLGVBQWUsQ0FBQzthQUNyQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsd0JBQXdCLEVBQUUscUJBQXFCLENBQUM7YUFDekUsTUFBTSxDQUFDLGlCQUFpQixDQUFDO2FBQ3pCLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFBO0lBSXhCLENBQUM7Q0FFVjtBQXBJRCxtQ0FvSUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IEhvdGVsRGV0YWlsIGZyb20gJ0FwcC9Nb2RlbHMvSG90ZWxEZXRhaWwnXG5pbXBvcnQgRGF0YWJhc2UgZnJvbSAnQGlvYzpBZG9uaXMvTHVjaWQvRGF0YWJhc2UnXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSG90ZWxzQ29udHJvbGxlciB7XG4gICAgcHVibGljIGFzeW5jIGluc2VydGhvdGVsKHtyZXF1ZXN0fTpIdHRwQ29udGV4dENvbnRyYWN0KVxuICAgIHtcbiAgIGNvbnN0IHRhYmxlMj1uZXcgSG90ZWxEZXRhaWwoKVxuICAgdGFibGUyLmhpZD1yZXF1ZXN0LmlucHV0KCdpZCcpXG4gICB0YWJsZTIuY3VzaWQ9cmVxdWVzdC5pbnB1dCgnY3VzaWQnKVxuICAgdGFibGUyLmJyYW5jaD1yZXF1ZXN0LmlucHV0KCdicmFuY2gnKVxuICAgdGFibGUyLnN0cmVldD1yZXF1ZXN0LmlucHV0KCdzdHJlZXQnKVxuICAgdGFibGUyLnBpbl9jb2RlPXJlcXVlc3QuaW5wdXQoJ3BpbmNvZGUnKVxuICAgYXdhaXQgdGFibGUyLnNhdmUoKVxuICAgcmV0dXJuIGF3YWl0IEhvdGVsRGV0YWlsLmFsbCgpXG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyByZWFkaG90ZWwoKVxuICAgIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRhdGE9YXdhaXQgSG90ZWxEZXRhaWwuYWxsKClcbiAgICAgICAgZGF0YS5zb3J0KChhLCBiKSA9PiBhW1wiaWRcIl0gLSBiW1wiaWRcIl0pXG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgXG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVob3RlbCh7cmVxdWVzdH0pXG4gICAge1xuICAgICAgICB0cnl7XG4gICAgICBjb25zdCB1c2VyPWF3YWl0IEhvdGVsRGV0YWlsLmZpbmRCeU9yRmFpbCgnaWQnLHJlcXVlc3QuaW5wdXQoJ2lkJykpXG4gICAgICB1c2VyLmhpZD1yZXF1ZXN0LmlucHV0KCdpZCcpXG4gICB1c2VyLmN1c2lkPXJlcXVlc3QuaW5wdXQoJ2N1c2lkJylcbiAgIHVzZXIuYnJhbmNoPXJlcXVlc3QuaW5wdXQoJ2JyYW5jaCcpXG4gICB1c2VyLnN0cmVldD1yZXF1ZXN0LmlucHV0KCdzdHJlZXQnKVxuICAgdXNlci5waW5fY29kZT1yZXF1ZXN0LmlucHV0KCdwaW5jb2RlJylcbiAgICBhd2FpdCB1c2VyLnNhdmUoKVxuICAgIHJldHVybiBhd2FpdCBIb3RlbERldGFpbC5hbGwoKVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoe1xuXG4gICAgICAgICAgcmV0dXJuIFwic29ycnkgd3JvbmcgZGV0YWlsc1wiXG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGFzeW5jIGRlbGV0ZWhvdGVsKHtyZXF1ZXN0fSlcbiAgICB7XG4gICAgICB0cnl7IFxuICAgICAgXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBIb3RlbERldGFpbC5maW5kQnlPckZhaWwoJ2lkJyxyZXF1ZXN0LnBhcmFtcygpLmlkKVxudXNlci5kZWxldGUoKVxuYXdhaXQgdXNlci5zYXZlKClcbnJldHVybiBhd2FpdCBIb3RlbERldGFpbC5hbGwoKVxuICAgICAgfVxuICAgICAgY2F0Y2h7XG4gICAgICAgIHJldHVybiBcInNvcnJ5IHdyb25nIGRldGFpbHNcIlxuICAgICAgfVxuXG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBoaWRhc2MoKVxuICAgIHtcbnJldHVybiBIb3RlbERldGFpbC5xdWVyeSgpLm9yZGVyQnkoXCJoaWRcIixcImFzY1wiKVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgaGlkZGVzYygpXG4gICAge1xucmV0dXJuIEhvdGVsRGV0YWlsLnF1ZXJ5KCkub3JkZXJCeShcImhpZFwiLFwiZGVzY1wiKVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgY3VzaWRhc2MoKVxuICAgIHtcbnJldHVybiBIb3RlbERldGFpbC5xdWVyeSgpLm9yZGVyQnkoXCJjdXNpZFwiLFwiYXNjXCIpXG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBjdXNpZGRlc2MoKVxuICAgIHtcbnJldHVybiBIb3RlbERldGFpbC5xdWVyeSgpLm9yZGVyQnkoXCJjdXNpZFwiLFwiZGVzY1wiKVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgYnJhbmNoYXNjKClcbiAgICB7XG5yZXR1cm4gSG90ZWxEZXRhaWwucXVlcnkoKS5vcmRlckJ5KFwiYnJhbmNoXCIsXCJhc2NcIilcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIGJyYW5jaGRlc2MoKVxuICAgIHtcbnJldHVybiBIb3RlbERldGFpbC5xdWVyeSgpLm9yZGVyQnkoXCJicmFuY2hcIixcImRlc2NcIilcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIHN0cmVldGFzYygpXG4gICAge1xucmV0dXJuIEhvdGVsRGV0YWlsLnF1ZXJ5KCkub3JkZXJCeShcInN0cmVldFwiLFwiYXNjXCIpXG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBzdHJlZXRkZXNjKClcbiAgICB7XG5yZXR1cm4gSG90ZWxEZXRhaWwucXVlcnkoKS5vcmRlckJ5KFwic3RyZWV0XCIsXCJkZXNjXCIpXG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBwaW5jb2RlYXNjKClcbiAgICB7XG5yZXR1cm4gSG90ZWxEZXRhaWwucXVlcnkoKS5vcmRlckJ5KFwicGluX2NvZGVcIixcImFzY1wiKVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgcGluY29kZWRlc2MoKVxuICAgIHtcbnJldHVybiBIb3RlbERldGFpbC5xdWVyeSgpLm9yZGVyQnkoXCJwaW5fY29kZVwiLFwiZGVzY1wiKVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgc2VhcmNoaG90ZWwoe3JlcXVlc3R9KVxue1xuY29uc3QgZGF0YSA9IHJlcXVlc3QuaW5wdXQoJ0tleScpXG4gICAgICAgICAgICByZXR1cm4gRGF0YWJhc2VcbiAgICAgICAgICAgIC5mcm9tKCdob3RlbF9kZXRhaWxzJylcbiAgICAgICAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgICAgICAgLndoZXJlKChxdWVyeSkgPT57XG4gICAgICAgICAgICAgICAgaWYoL15bMC05XS8udGVzdChkYXRhKSl7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgIC53aGVyZSgnaWQnLGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5vcldoZXJlKCdoaWQnLGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5vcldoZXJlKCdjdXNpZCcsZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLm9yV2hlcmUoJ3Bpbl9jb2RlJywrZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLm9yV2hlcmVJTGlrZSgnYnJhbmNoJywnJScrZGF0YSsnJScpXG4gICAgICAgICAgICAgICAgICAgIC5vcldoZXJlSUxpa2UoJ3N0cmVldCcsJyUnK2RhdGErJyUnKVxuICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub3JXaGVyZSgocXVlcnkpID0+e1xuICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgLm9yV2hlcmVJTGlrZSgnYnJhbmNoJywnJScrZGF0YSsnJScpXG4gICAgICAgICAgICAgICAgLm9yV2hlcmVJTGlrZSgnc3RyZWV0JywnJScrZGF0YSsnJScpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICBwdWJsaWMgYXN5bmMganNvbmRhdGEoKVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGE9YXdhaXQgSG90ZWxEZXRhaWwuYWxsKClcbiAgICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgICAgfVxuICAgICAgICAgIHB1YmxpYyBhc3luYyBjdXN0b21lcm5hbWUoKVxuICAgICAgICAgIHtcbiAgICAgICAgIHJldHVybiAgIERhdGFiYXNlXG4gIC5mcm9tKCdob3RlbF9kZXRhaWxzJylcbiAgLmpvaW4oJ2N1c3RvbWVyX2RldGFpbHMnLCAnY3VzdG9tZXJfZGV0YWlscy5jdXNpZCcsICdob3RlbF9kZXRhaWxzLmN1c2lkJylcbiAgLnNlbGVjdCgnaG90ZWxfZGV0YWlscy4qJylcbiAgLnNlbGVjdCgnY3VzdG9tZXJfZGV0YWlscy5uYW1lJylcblxuIFxuICBcbiAgICAgICAgICB9XG5cbn1cbiJdfQ==