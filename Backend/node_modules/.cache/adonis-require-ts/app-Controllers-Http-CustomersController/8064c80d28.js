"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomerDetail_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/CustomerDetail"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class CustomersController {
    async insertcustomer({ request }) {
        const table1 = new CustomerDetail_1.default();
        table1.cusid = request.input('id');
        table1.name = request.input('name');
        table1.owner = request.input('owner');
        await table1.save();
        return await CustomerDetail_1.default.all();
    }
    async readcustomer() {
        const data = Database_1.default.from('customer_details')
            .leftJoin('hotel_details', 'hotel_details.cusid', 'customer_details.cusid')
            .groupBy('customer_details.id')
            .select("customer_details.*")
            .count('customer_details.cusid as count')
            .orderBy('id', 'asc');
        return data;
    }
    async updatecustomer({ request }) {
        try {
            const user = await CustomerDetail_1.default.findByOrFail('id', request.params().id);
            user.cusid = request.input('id');
            user.name = request.input('name');
            user.owner = request.input('owner');
            await user.save();
            await user.save();
            return await CustomerDetail_1.default.all();
        }
        catch {
            return "sorry wrong details";
        }
    }
    async deletecustomer({ request }) {
        try {
            const user = await CustomerDetail_1.default.findByOrFail('id', request.params().id);
            user.delete();
            await user.save();
            return await CustomerDetail_1.default.all();
        }
        catch {
            return "sorry wrong details";
        }
    }
    async iddesc() {
        const data = Database_1.default.from('customer_details')
            .leftJoin('hotel_details', 'hotel_details.cusid', 'customer_details.cusid')
            .groupBy('customer_details.id')
            .select("customer_details.*")
            .count('customer_details.cusid as count')
            .orderBy('id', 'desc');
        return data;
    }
    async nameasc() {
        const data = Database_1.default.from('customer_details')
            .leftJoin('hotel_details', 'hotel_details.cusid', 'customer_details.cusid')
            .groupBy('customer_details.id')
            .select("customer_details.*")
            .count('customer_details.cusid as count')
            .orderBy('name', 'asc');
        return data;
    }
    async namedsc() {
        const data = Database_1.default.from('customer_details')
            .leftJoin('hotel_details', 'hotel_details.cusid', 'customer_details.cusid')
            .groupBy('customer_details.id')
            .select("customer_details.*")
            .count('customer_details.cusid as count')
            .orderBy('name', 'desc');
        return data;
    }
    async ownerasc() {
        const data = Database_1.default.from('customer_details')
            .leftJoin('hotel_details', 'hotel_details.cusid', 'customer_details.cusid')
            .groupBy('customer_details.id')
            .select("customer_details.*")
            .count('customer_details.cusid as count')
            .orderBy('owner', 'asc');
        return data;
    }
    async ownerdsc() {
        const data = Database_1.default.from('customer_details')
            .leftJoin('hotel_details', 'hotel_details.cusid', 'customer_details.cusid')
            .groupBy('customer_details.id')
            .select("customer_details.*")
            .count('customer_details.cusid as count')
            .orderBy('owner', 'desc');
        return data;
    }
    async searchcustomer({ request }) {
        const data = request.input('Key');
        return Database_1.default
            .from('customer_details')
            .select('*')
            .where((query) => {
            if (/^[0-9]/.test(data)) {
                query
                    .where('id', data)
                    .orWhere('cusid', data)
                    .orWhereILike('name', '%' + data + '%')
                    .orWhereILike('owner', '%' + data + '%');
            }
        })
            .orWhere((query) => {
            query
                .whereILike('name', '%' + data + '%')
                .orWhereILike('owner', '%' + data + '%');
        });
    }
    counting() {
        const data = Database_1.default.from('customer_details')
            .leftJoin('hotel_details', 'hotel_details.cusid', 'customer_details.cusid')
            .groupBy('customer_details.id')
            .select("customer_details.*")
            .count('customer_details.cusid as count');
        return data;
    }
}
exports.default = CustomersController;
//# sourceMappingURL=data:application/json;base64,