"use strict";
/*
 * @japa/core
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Refiner = void 0;
const Group_1 = require("../Group");
/**
 * Exposes the API to refine unwanted tests based upon applied
 * filters.
 *
 * @example
 * const refiner = new Refiner({ tags: ['@slow'] })
 * refiner.allows('tags', ['@slow']) // true
 * refiner.allows('tags', ['@regression']) // false
 *
 * const refiner = new Refiner({ tags: [] })
 * refiner.allows('tags', ['@slow']) // true
 * refiner.allows('tags', ['@regression']) // true
 */
class Refiner {
    constructor(filters = {}) {
        /**
         * A set of pinned tests
         */
        this.pinnedTests = new Set();
        /**
         * Available filters
         */
        this.filters = {
            tags: [],
            tests: [],
            groups: [],
            negateTags: [],
        };
        if (filters.tags) {
            this.add('tags', filters.tags);
        }
        if (filters.tests) {
            this.add('tests', filters.tests);
        }
        if (filters.groups) {
            this.add('groups', filters.groups);
        }
    }
    /**
     * Pin a test to be executed.
     */
    pinTest(test) {
        this.pinnedTests.add(test);
    }
    /**
     * Find if the group is allowed to execute its tests.
     */
    isGroupAllowed(group) {
        /**
         * All groups are allowed, when no filters are applied
         * on the group title
         */
        if (!this.filters.groups.length) {
            return true;
        }
        return this.filters.groups.includes(group.title);
    }
    /**
     * Find if the test is allowed to be executed by checking
     * for the test title filter
     */
    isTestTitleAllowed(test) {
        /**
         * All tests are allowed, when no filters are applied
         * on the test title
         */
        if (!this.filters.tests.length) {
            return true;
        }
        return this.filters.tests.includes(test.title);
    }
    /**
     * Find if test is allowed by the negated tags filter
     */
    allowedByNegatedTags(test) {
        if (!this.filters.negateTags.length) {
            return true;
        }
        /**
         * There should be zero matching negated tags
         */
        return this.filters.negateTags.every((tag) => !test.options.tags.includes(tag));
    }
    /**
     * Test if the test is allowed by the tags filter
     */
    allowedByTags(test) {
        if (!this.filters.tags.length) {
            return true;
        }
        /**
         * Find one or more matching tags
         */
        return this.filters.tags.some((tag) => test.options.tags.includes(tag));
    }
    /*
     * Find if the test is allowed to be executed by checking
     * for the test tags
     */
    areTestTagsAllowed(test) {
        return this.allowedByTags(test) && this.allowedByNegatedTags(test);
    }
    /*
     * Find if the test is allowed to be executed by checking
     * for the pinned tests
     */
    isAllowedByPinnedTest(test) {
        /**
         * All tests are allowed, when no tests are pinned
         */
        if (!this.pinnedTests.size) {
            return true;
        }
        return this.pinnedTests.has(test);
    }
    /**
     * Add a filter
     */
    add(layer, values) {
        if (layer === 'tags') {
            values.forEach((tag) => {
                if (tag.startsWith('!')) {
                    this.filters.negateTags.push(tag.slice(1));
                }
                else {
                    this.filters.tags.push(tag);
                }
            });
        }
        else {
            this.filters[layer].push(...values);
        }
    }
    /**
     * Check if refiner allows a specific test or group to run by looking
     * at the applied filters
     */
    allows(testOrGroup) {
        if (testOrGroup instanceof Group_1.Group) {
            return this.isGroupAllowed(testOrGroup);
        }
        /**
         * Layer 1
         */
        const isTestTitleAllowed = this.isTestTitleAllowed(testOrGroup);
        if (!isTestTitleAllowed) {
            return false;
        }
        /**
         * Layer 2
         */
        const areTestTagsAllowed = this.areTestTagsAllowed(testOrGroup);
        if (!areTestTagsAllowed) {
            return false;
        }
        /**
         * Layer 3
         */
        return this.isAllowedByPinnedTest(testOrGroup);
    }
}
exports.Refiner = Refiner;
