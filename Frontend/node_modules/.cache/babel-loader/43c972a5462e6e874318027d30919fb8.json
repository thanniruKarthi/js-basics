{"ast":null,"code":"// Types\nimport Vue from 'vue'; // Utils\n\nimport { getObjectValueByPath, wrapInArray } from '../../util/helpers';\n\nfunction needsTd(slot) {\n  var _a;\n\n  return slot.length !== 1 || !['td', 'th'].includes((_a = slot[0]) === null || _a === void 0 ? void 0 : _a.tag);\n}\n\nexport default Vue.extend({\n  name: 'row',\n  functional: true,\n  props: {\n    headers: Array,\n    index: Number,\n    item: Object,\n    rtl: Boolean\n  },\n\n  render(h, {\n    props,\n    slots,\n    data\n  }) {\n    const computedSlots = slots();\n    const columns = props.headers.map(header => {\n      const children = [];\n      const value = getObjectValueByPath(props.item, header.value);\n      const slotName = header.value;\n      const scopedSlot = data.scopedSlots && data.scopedSlots.hasOwnProperty(slotName) && data.scopedSlots[slotName];\n      const regularSlot = computedSlots.hasOwnProperty(slotName) && computedSlots[slotName];\n\n      if (scopedSlot) {\n        children.push(...wrapInArray(scopedSlot({\n          item: props.item,\n          isMobile: false,\n          header,\n          index: props.index,\n          value\n        })));\n      } else if (regularSlot) {\n        children.push(...wrapInArray(regularSlot));\n      } else {\n        children.push(value == null ? value : String(value));\n      }\n\n      const textAlign = `text-${header.align || 'start'}`;\n      return needsTd(children) ? h('td', {\n        class: [textAlign, header.cellClass, {\n          'v-data-table__divider': header.divider\n        }]\n      }, children) : children;\n    });\n    return h('tr', data, columns);\n  }\n\n});","map":null,"metadata":{},"sourceType":"module"}