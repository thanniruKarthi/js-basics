{"ast":null,"code":"// Components\nimport { VData } from '../VData';\nimport VDataFooter from './VDataFooter'; // Mixins\n\nimport Mobile from '../../mixins/mobile';\nimport Themeable from '../../mixins/themeable'; // Helpers\n\nimport mixins from '../../util/mixins';\nimport { deepEqual, getObjectValueByPath, getPrefixedScopedSlots, getSlot, camelizeObjectKeys, keyCodes } from '../../util/helpers';\nimport { breaking, removed } from '../../util/console';\n/* @vue/component */\n\nexport default mixins(Mobile, Themeable).extend({\n  name: 'v-data-iterator',\n  props: { ...VData.options.props,\n    itemKey: {\n      type: String,\n      default: 'id'\n    },\n    value: {\n      type: Array,\n      default: () => []\n    },\n    singleSelect: Boolean,\n    expanded: {\n      type: Array,\n      default: () => []\n    },\n    mobileBreakpoint: { ...Mobile.options.props.mobileBreakpoint,\n      default: 600\n    },\n    singleExpand: Boolean,\n    loading: [Boolean, String],\n    noResultsText: {\n      type: String,\n      default: '$vuetify.dataIterator.noResultsText'\n    },\n    noDataText: {\n      type: String,\n      default: '$vuetify.noDataText'\n    },\n    loadingText: {\n      type: String,\n      default: '$vuetify.dataIterator.loadingText'\n    },\n    hideDefaultFooter: Boolean,\n    footerProps: Object,\n    selectableKey: {\n      type: String,\n      default: 'isSelectable'\n    }\n  },\n  data: () => ({\n    selection: {},\n    expansion: {},\n    internalCurrentItems: [],\n    shiftKeyDown: false,\n    lastEntry: -1\n  }),\n  computed: {\n    everyItem() {\n      return !!this.selectableItems.length && this.selectableItems.every(i => this.isSelected(i));\n    },\n\n    someItems() {\n      return this.selectableItems.some(i => this.isSelected(i));\n    },\n\n    sanitizedFooterProps() {\n      return camelizeObjectKeys(this.footerProps);\n    },\n\n    selectableItems() {\n      return this.internalCurrentItems.filter(item => this.isSelectable(item));\n    }\n\n  },\n  watch: {\n    value: {\n      handler(value) {\n        this.selection = value.reduce((selection, item) => {\n          selection[getObjectValueByPath(item, this.itemKey)] = item;\n          return selection;\n        }, {});\n      },\n\n      immediate: true\n    },\n\n    selection(value, old) {\n      if (deepEqual(Object.keys(value), Object.keys(old))) return;\n      this.$emit('input', Object.values(value));\n    },\n\n    expanded: {\n      handler(value) {\n        this.expansion = value.reduce((expansion, item) => {\n          expansion[getObjectValueByPath(item, this.itemKey)] = true;\n          return expansion;\n        }, {});\n      },\n\n      immediate: true\n    },\n\n    expansion(value, old) {\n      if (deepEqual(value, old)) return;\n      const keys = Object.keys(value).filter(k => value[k]);\n      const expanded = !keys.length ? [] : this.items.filter(i => keys.includes(String(getObjectValueByPath(i, this.itemKey))));\n      this.$emit('update:expanded', expanded);\n    }\n\n  },\n\n  created() {\n    const breakingProps = [['disable-initial-sort', 'sort-by'], ['filter', 'custom-filter'], ['pagination', 'options'], ['total-items', 'server-items-length'], ['hide-actions', 'hide-default-footer'], ['rows-per-page-items', 'footer-props.items-per-page-options'], ['rows-per-page-text', 'footer-props.items-per-page-text'], ['prev-icon', 'footer-props.prev-icon'], ['next-icon', 'footer-props.next-icon']];\n    /* istanbul ignore next */\n\n    breakingProps.forEach(([original, replacement]) => {\n      if (this.$attrs.hasOwnProperty(original)) breaking(original, replacement, this);\n    });\n    const removedProps = ['expand', 'content-class', 'content-props', 'content-tag'];\n    /* istanbul ignore next */\n\n    removedProps.forEach(prop => {\n      if (this.$attrs.hasOwnProperty(prop)) removed(prop);\n    });\n  },\n\n  mounted() {\n    window.addEventListener('keydown', this.onKeyDown);\n    window.addEventListener('keyup', this.onKeyUp);\n  },\n\n  beforeDestroy() {\n    window.removeEventListener('keydown', this.onKeyDown);\n    window.removeEventListener('keyup', this.onKeyUp);\n  },\n\n  methods: {\n    onKeyDown(e) {\n      if (e.keyCode !== keyCodes.shift) return;\n      this.shiftKeyDown = true;\n    },\n\n    onKeyUp(e) {\n      if (e.keyCode !== keyCodes.shift) return;\n      this.shiftKeyDown = false;\n    },\n\n    toggleSelectAll(value) {\n      const selection = Object.assign({}, this.selection);\n\n      for (let i = 0; i < this.selectableItems.length; i++) {\n        const item = this.selectableItems[i];\n        if (!this.isSelectable(item)) continue;\n        const key = getObjectValueByPath(item, this.itemKey);\n        if (value) selection[key] = item;else delete selection[key];\n      }\n\n      this.selection = selection;\n      this.$emit('toggle-select-all', {\n        items: this.internalCurrentItems,\n        value\n      });\n    },\n\n    isSelectable(item) {\n      return getObjectValueByPath(item, this.selectableKey) !== false;\n    },\n\n    isSelected(item) {\n      return !!this.selection[getObjectValueByPath(item, this.itemKey)] || false;\n    },\n\n    select(item, value = true, emit = true) {\n      if (!this.isSelectable(item)) return;\n      const selection = this.singleSelect ? {} : Object.assign({}, this.selection);\n      const key = getObjectValueByPath(item, this.itemKey);\n      if (value) selection[key] = item;else delete selection[key];\n      const index = this.selectableItems.findIndex(x => getObjectValueByPath(x, this.itemKey) === key);\n      if (this.lastEntry === -1) this.lastEntry = index;else if (this.shiftKeyDown && !this.singleSelect && emit) {\n        const lastEntryKey = getObjectValueByPath(this.selectableItems[this.lastEntry], this.itemKey);\n        const lastEntryKeySelected = Object.keys(this.selection).includes(String(lastEntryKey));\n        this.multipleSelect(lastEntryKeySelected, emit, selection, index);\n      }\n      this.lastEntry = index;\n\n      if (this.singleSelect && emit) {\n        const keys = Object.keys(this.selection);\n        const old = keys.length && getObjectValueByPath(this.selection[keys[0]], this.itemKey);\n        old && old !== key && this.$emit('item-selected', {\n          item: this.selection[old],\n          value: false\n        });\n      }\n\n      this.selection = selection;\n      emit && this.$emit('item-selected', {\n        item,\n        value\n      });\n    },\n\n    multipleSelect(value = true, emit = true, selection, index) {\n      const start = index < this.lastEntry ? index : this.lastEntry;\n      const end = index < this.lastEntry ? this.lastEntry : index;\n\n      for (let i = start; i <= end; i++) {\n        const currentItem = this.selectableItems[i];\n        const key = getObjectValueByPath(currentItem, this.itemKey);\n        if (value) selection[key] = currentItem;else delete selection[key];\n        emit && this.$emit('item-selected', {\n          currentItem,\n          value\n        });\n      }\n    },\n\n    isExpanded(item) {\n      return this.expansion[getObjectValueByPath(item, this.itemKey)] || false;\n    },\n\n    expand(item, value = true) {\n      const expansion = this.singleExpand ? {} : Object.assign({}, this.expansion);\n      const key = getObjectValueByPath(item, this.itemKey);\n      if (value) expansion[key] = true;else delete expansion[key];\n      this.expansion = expansion;\n      this.$emit('item-expanded', {\n        item,\n        value\n      });\n    },\n\n    createItemProps(item, index) {\n      return {\n        item,\n        index,\n        select: v => this.select(item, v),\n        isSelected: this.isSelected(item),\n        expand: v => this.expand(item, v),\n        isExpanded: this.isExpanded(item),\n        isMobile: this.isMobile\n      };\n    },\n\n    genEmptyWrapper(content) {\n      return this.$createElement('div', content);\n    },\n\n    genEmpty(originalItemsLength, filteredItemsLength) {\n      if (originalItemsLength === 0 && this.loading) {\n        const loading = this.$slots.loading || this.$vuetify.lang.t(this.loadingText);\n        return this.genEmptyWrapper(loading);\n      } else if (originalItemsLength === 0) {\n        const noData = this.$slots['no-data'] || this.$vuetify.lang.t(this.noDataText);\n        return this.genEmptyWrapper(noData);\n      } else if (filteredItemsLength === 0) {\n        const noResults = this.$slots['no-results'] || this.$vuetify.lang.t(this.noResultsText);\n        return this.genEmptyWrapper(noResults);\n      }\n\n      return null;\n    },\n\n    genItems(props) {\n      const empty = this.genEmpty(props.originalItemsLength, props.pagination.itemsLength);\n      if (empty) return [empty];\n\n      if (this.$scopedSlots.default) {\n        return this.$scopedSlots.default({ ...props,\n          isSelected: this.isSelected,\n          select: this.select,\n          isExpanded: this.isExpanded,\n          isMobile: this.isMobile,\n          expand: this.expand\n        });\n      }\n\n      if (this.$scopedSlots.item) {\n        return props.items.map((item, index) => this.$scopedSlots.item(this.createItemProps(item, index)));\n      }\n\n      return [];\n    },\n\n    genFooter(props) {\n      if (this.hideDefaultFooter) return null;\n      const data = {\n        props: { ...this.sanitizedFooterProps,\n          options: props.options,\n          pagination: props.pagination\n        },\n        on: {\n          'update:options': value => props.updateOptions(value)\n        }\n      };\n      const scopedSlots = getPrefixedScopedSlots('footer.', this.$scopedSlots);\n      return this.$createElement(VDataFooter, {\n        scopedSlots,\n        ...data\n      });\n    },\n\n    genDefaultScopedSlot(props) {\n      const outerProps = { ...props,\n        someItems: this.someItems,\n        everyItem: this.everyItem,\n        toggleSelectAll: this.toggleSelectAll\n      };\n      return this.$createElement('div', {\n        staticClass: 'v-data-iterator'\n      }, [getSlot(this, 'header', outerProps, true), this.genItems(props), this.genFooter(props), getSlot(this, 'footer', outerProps, true)]);\n    }\n\n  },\n\n  render() {\n    return this.$createElement(VData, {\n      props: this.$props,\n      on: {\n        'update:options': (v, old) => !deepEqual(v, old) && this.$emit('update:options', v),\n        'update:page': v => this.$emit('update:page', v),\n        'update:items-per-page': v => this.$emit('update:items-per-page', v),\n        'update:sort-by': v => this.$emit('update:sort-by', v),\n        'update:sort-desc': v => this.$emit('update:sort-desc', v),\n        'update:group-by': v => this.$emit('update:group-by', v),\n        'update:group-desc': v => this.$emit('update:group-desc', v),\n        pagination: (v, old) => !deepEqual(v, old) && this.$emit('pagination', v),\n        'current-items': v => {\n          this.internalCurrentItems = v;\n          this.$emit('current-items', v);\n        },\n        'page-count': v => this.$emit('page-count', v)\n      },\n      scopedSlots: {\n        default: this.genDefaultScopedSlot\n      }\n    });\n  }\n\n});","map":null,"metadata":{},"sourceType":"module"}