{"ast":null,"code":"import { validationMixin } from 'vuelidate';\nimport { required, maxLength, email } from 'vuelidate/lib/validators';\nexport default {\n  mixins: [validationMixin],\n  validations: {\n    name: {\n      required,\n      maxLength: maxLength(10)\n    },\n    email: {\n      required,\n      email\n    },\n    select: {\n      required\n    },\n    checkbox: {\n      checked(val) {\n        return val;\n      }\n\n    }\n  },\n  data: () => ({\n    name: '',\n    email: '',\n    select: null,\n    items: ['Item 1', 'Item 2', 'Item 3', 'Item 4'],\n    checkbox: false\n  }),\n  computed: {\n    checkboxErrors() {\n      const errors = [];\n      if (!this.$v.checkbox.$dirty) return errors;\n      !this.$v.checkbox.checked && errors.push('You must agree to continue!');\n      return errors;\n    },\n\n    selectErrors() {\n      const errors = [];\n      if (!this.$v.select.$dirty) return errors;\n      !this.$v.select.required && errors.push('Item is required');\n      return errors;\n    },\n\n    nameErrors() {\n      const errors = [];\n      if (!this.$v.name.$dirty) return errors;\n      !this.$v.name.maxLength && errors.push('Name must be at most 10 characters long');\n      !this.$v.name.required && errors.push('Name is required.');\n      return errors;\n    },\n\n    emailErrors() {\n      const errors = [];\n      if (!this.$v.email.$dirty) return errors;\n      !this.$v.email.email && errors.push('Must be valid e-mail');\n      !this.$v.email.required && errors.push('E-mail is required');\n      return errors;\n    }\n\n  },\n  methods: {\n    submit() {\n      this.$v.$touch();\n    },\n\n    clear() {\n      this.$v.$reset();\n      this.name = '';\n      this.email = '';\n      this.select = null;\n      this.checkbox = false;\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAiDA;AACA;AAEA;EACAA,yBADA;EAGAC;IACAC;MAAAC;MAAAC;IAAA,CADA;IAEAC;MAAAF;MAAAE;IAAA,CAFA;IAGAC;MAAAH;IAAA,CAHA;IAIAI;MACAC;QACA;MACA;;IAHA;EAJA,CAHA;EAcAC;IACAP,QADA;IAEAG,SAFA;IAGAC,YAHA;IAIAI,QACA,QADA,EAEA,QAFA,EAGA,QAHA,EAIA,QAJA,CAJA;IAUAH;EAVA,EAdA;EA2BAI;IACAC;MACA;MACA;MACA;MACA;IACA,CANA;;IAOAC;MACA;MACA;MACA;MACA;IACA,CAZA;;IAaAC;MACA;MACA;MACA;MACA;MACA;IACA,CAnBA;;IAoBAC;MACA;MACA;MACA;MACA;MACA;IACA;;EA1BA,CA3BA;EAwDAC;IACAC;MACA;IACA,CAHA;;IAIAC;MACA;MACA;MACA;MACA;MACA;IACA;;EAVA;AAxDA","names":["mixins","validations","name","required","maxLength","email","select","checkbox","checked","data","items","computed","checkboxErrors","selectErrors","nameErrors","emailErrors","methods","submit","clear"],"sourceRoot":"src/components","sources":["formData.vue"],"sourcesContent":["<template>\n  <form>\n    <v-text-field\n      v-model=\"name\"\n      :error-messages=\"nameErrors\"\n      :counter=\"10\"\n      label=\"Name\"\n      required\n      @input=\"$v.name.$touch()\"\n      @blur=\"$v.name.$touch()\"\n    ></v-text-field>\n    <v-text-field\n      v-model=\"email\"\n      :error-messages=\"emailErrors\"\n      label=\"E-mail\"\n      required\n      @input=\"$v.email.$touch()\"\n      @blur=\"$v.email.$touch()\"\n    ></v-text-field>\n    <v-select\n      v-model=\"select\"\n      :items=\"items\"\n      :error-messages=\"selectErrors\"\n      label=\"Item\"\n      required\n      @change=\"$v.select.$touch()\"\n      @blur=\"$v.select.$touch()\"\n    ></v-select>\n    <v-checkbox\n      v-model=\"checkbox\"\n      :error-messages=\"checkboxErrors\"\n      label=\"Do you agree?\"\n      required\n      @change=\"$v.checkbox.$touch()\"\n      @blur=\"$v.checkbox.$touch()\"\n    ></v-checkbox>\n\n    <v-btn\n      class=\"mr-4\"\n      @click=\"submit\"\n    >\n      submit\n    </v-btn>\n    <v-btn @click=\"clear\">\n      clear\n    </v-btn>\n  </form>\n</template>\n<script>\n  import { validationMixin } from 'vuelidate'\n  import { required, maxLength, email } from 'vuelidate/lib/validators'\n\n  export default {\n    mixins: [validationMixin],\n\n    validations: {\n      name: { required, maxLength: maxLength(10) },\n      email: { required, email },\n      select: { required },\n      checkbox: {\n        checked (val) {\n          return val\n        },\n      },\n    },\n\n    data: () => ({\n      name: '',\n      email: '',\n      select: null,\n      items: [\n        'Item 1',\n        'Item 2',\n        'Item 3',\n        'Item 4',\n      ],\n      checkbox: false,\n    }),\n\n    computed: {\n      checkboxErrors () {\n        const errors = []\n        if (!this.$v.checkbox.$dirty) return errors\n        !this.$v.checkbox.checked && errors.push('You must agree to continue!')\n        return errors\n      },\n      selectErrors () {\n        const errors = []\n        if (!this.$v.select.$dirty) return errors\n        !this.$v.select.required && errors.push('Item is required')\n        return errors\n      },\n      nameErrors () {\n        const errors = []\n        if (!this.$v.name.$dirty) return errors\n        !this.$v.name.maxLength && errors.push('Name must be at most 10 characters long')\n        !this.$v.name.required && errors.push('Name is required.')\n        return errors\n      },\n      emailErrors () {\n        const errors = []\n        if (!this.$v.email.$dirty) return errors\n        !this.$v.email.email && errors.push('Must be valid e-mail')\n        !this.$v.email.required && errors.push('E-mail is required')\n        return errors\n      },\n    },\n\n    methods: {\n      submit () {\n        this.$v.$touch()\n      },\n      clear () {\n        this.$v.$reset()\n        this.name = ''\n        this.email = ''\n        this.select = null\n        this.checkbox = false\n      },\n    },\n  }\n</script>"]},"metadata":{},"sourceType":"module"}