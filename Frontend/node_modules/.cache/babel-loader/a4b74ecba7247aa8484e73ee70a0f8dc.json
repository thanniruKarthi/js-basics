{"ast":null,"code":"// Components\nimport VSimpleCheckbox from '../VCheckbox/VSimpleCheckbox';\nimport VDivider from '../VDivider';\nimport VSubheader from '../VSubheader';\nimport { VList, VListItem, VListItemAction, VListItemContent, VListItemTitle } from '../VList'; // Directives\n\nimport ripple from '../../directives/ripple'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport Themeable from '../../mixins/themeable'; // Helpers\n\nimport { escapeHTML, getPropertyFromItem } from '../../util/helpers'; // Types\n\nimport mixins from '../../util/mixins';\n/* @vue/component */\n\nexport default mixins(Colorable, Themeable).extend({\n  name: 'v-select-list',\n  // https://github.com/vuejs/vue/issues/6872\n  directives: {\n    ripple\n  },\n  props: {\n    action: Boolean,\n    dense: Boolean,\n    hideSelected: Boolean,\n    items: {\n      type: Array,\n      default: () => []\n    },\n    itemDisabled: {\n      type: [String, Array, Function],\n      default: 'disabled'\n    },\n    itemText: {\n      type: [String, Array, Function],\n      default: 'text'\n    },\n    itemValue: {\n      type: [String, Array, Function],\n      default: 'value'\n    },\n    noDataText: String,\n    noFilter: Boolean,\n    searchInput: null,\n    selectedItems: {\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    parsedItems() {\n      return this.selectedItems.map(item => this.getValue(item));\n    },\n\n    tileActiveClass() {\n      return Object.keys(this.setTextColor(this.color).class || {}).join(' ');\n    },\n\n    staticNoDataTile() {\n      const tile = {\n        attrs: {\n          role: undefined\n        },\n        on: {\n          mousedown: e => e.preventDefault() // Prevent onBlur from being called\n\n        }\n      };\n      return this.$createElement(VListItem, tile, [this.genTileContent(this.noDataText)]);\n    }\n\n  },\n  methods: {\n    genAction(item, inputValue) {\n      return this.$createElement(VListItemAction, [this.$createElement(VSimpleCheckbox, {\n        props: {\n          color: this.color,\n          value: inputValue,\n          ripple: false\n        },\n        on: {\n          input: () => this.$emit('select', item)\n        }\n      })]);\n    },\n\n    genDivider(props) {\n      return this.$createElement(VDivider, {\n        props\n      });\n    },\n\n    genFilteredText(text) {\n      text = text || '';\n      if (!this.searchInput || this.noFilter) return escapeHTML(text);\n      const {\n        start,\n        middle,\n        end\n      } = this.getMaskedCharacters(text);\n      return `${escapeHTML(start)}${this.genHighlight(middle)}${escapeHTML(end)}`;\n    },\n\n    genHeader(props) {\n      return this.$createElement(VSubheader, {\n        props\n      }, props.header);\n    },\n\n    genHighlight(text) {\n      return `<span class=\"v-list-item__mask\">${escapeHTML(text)}</span>`;\n    },\n\n    getMaskedCharacters(text) {\n      const searchInput = (this.searchInput || '').toString().toLocaleLowerCase();\n      const index = text.toLocaleLowerCase().indexOf(searchInput);\n      if (index < 0) return {\n        start: text,\n        middle: '',\n        end: ''\n      };\n      const start = text.slice(0, index);\n      const middle = text.slice(index, index + searchInput.length);\n      const end = text.slice(index + searchInput.length);\n      return {\n        start,\n        middle,\n        end\n      };\n    },\n\n    genTile({\n      item,\n      index,\n      disabled = null,\n      value = false\n    }) {\n      if (!value) value = this.hasItem(item);\n\n      if (item === Object(item)) {\n        disabled = disabled !== null ? disabled : this.getDisabled(item);\n      }\n\n      const tile = {\n        attrs: {\n          // Default behavior in list does not\n          // contain aria-selected by default\n          'aria-selected': String(value),\n          id: `list-item-${this._uid}-${index}`,\n          role: 'option'\n        },\n        on: {\n          mousedown: e => {\n            // Prevent onBlur from being called\n            e.preventDefault();\n          },\n          click: () => disabled || this.$emit('select', item)\n        },\n        props: {\n          activeClass: this.tileActiveClass,\n          disabled,\n          ripple: true,\n          inputValue: value\n        }\n      };\n\n      if (!this.$scopedSlots.item) {\n        return this.$createElement(VListItem, tile, [this.action && !this.hideSelected && this.items.length > 0 ? this.genAction(item, value) : null, this.genTileContent(item, index)]);\n      }\n\n      const parent = this;\n      const scopedSlot = this.$scopedSlots.item({\n        parent,\n        item,\n        attrs: { ...tile.attrs,\n          ...tile.props\n        },\n        on: tile.on\n      });\n      return this.needsTile(scopedSlot) ? this.$createElement(VListItem, tile, scopedSlot) : scopedSlot;\n    },\n\n    genTileContent(item, index = 0) {\n      const innerHTML = this.genFilteredText(this.getText(item));\n      return this.$createElement(VListItemContent, [this.$createElement(VListItemTitle, {\n        domProps: {\n          innerHTML\n        }\n      })]);\n    },\n\n    hasItem(item) {\n      return this.parsedItems.indexOf(this.getValue(item)) > -1;\n    },\n\n    needsTile(slot) {\n      return slot.length !== 1 || slot[0].componentOptions == null || slot[0].componentOptions.Ctor.options.name !== 'v-list-item';\n    },\n\n    getDisabled(item) {\n      return Boolean(getPropertyFromItem(item, this.itemDisabled, false));\n    },\n\n    getText(item) {\n      return String(getPropertyFromItem(item, this.itemText, item));\n    },\n\n    getValue(item) {\n      return getPropertyFromItem(item, this.itemValue, this.getText(item));\n    }\n\n  },\n\n  render() {\n    const children = [];\n    const itemsLength = this.items.length;\n\n    for (let index = 0; index < itemsLength; index++) {\n      const item = this.items[index];\n      if (this.hideSelected && this.hasItem(item)) continue;\n      if (item == null) children.push(this.genTile({\n        item,\n        index\n      }));else if (item.header) children.push(this.genHeader(item));else if (item.divider) children.push(this.genDivider(item));else children.push(this.genTile({\n        item,\n        index\n      }));\n    }\n\n    children.length || children.push(this.$slots['no-data'] || this.staticNoDataTile);\n    this.$slots['prepend-item'] && children.unshift(this.$slots['prepend-item']);\n    this.$slots['append-item'] && children.push(this.$slots['append-item']);\n    return this.$createElement(VList, {\n      staticClass: 'v-select-list',\n      class: this.themeClasses,\n      attrs: {\n        role: 'listbox',\n        tabindex: -1\n      },\n      props: {\n        dense: this.dense\n      }\n    }, children);\n  }\n\n});","map":null,"metadata":{},"sourceType":"module"}